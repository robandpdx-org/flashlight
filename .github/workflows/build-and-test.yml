name: flashlight/flashlight/build-and-test
on:
  push:
    branches:
    - main
env:
  CODECOV_TOKEN: xxxxf690
  DOCKER_TOKEN: xxxxXFxk
  DOCKER_USERNAME: xxxxml
jobs:
  build-flashlight-core:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
        - linux
        backend:
        - arrayfire
        autograd_backend:
        - cudnn
        distributed_backend:
        - ''
        - nccl
        build_parallelism: ''
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: "./.github/actions/install-all-dependencies"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.autograd_backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
    - uses: "./.github/actions/build-flashlight-core"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
        build_parallelism: "${{ matrix.build_parallelism }}"
    - uses: actions/upload-artifact@v4.1.0
      with:
        path: "./."
  test-flashlight-core:
    runs-on: ubuntu-latest
    needs:
    - build-flashlight-core-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>+<< matrix.distributed_backend >>
    strategy:
      matrix:
        platform:
        - linux
        backend:
        - arrayfire
        autograd_backend:
        - cudnn
        distributed_backend:
        - nccl
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: "./.github/actions/install-all-dependencies"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.autograd_backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
    - uses: actions/download-artifact@v4.1.0
      with:
        path: "."
    - uses: "./.github/actions/test-flashlight"
      with:
        path: build/flashlight/fl/test
  build-flashlight-core_1:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
        - macos-arm
        - linux-arm
        backend:
        - arrayfire
        - onednn
        autograd_backend:
        - onednn
        distributed_backend: ''
        build_parallelism:
        - '8'
        exclude:
        - platform: linux-arm
          backend: arrayfire
          autograd_backend: onednn
          build_parallelism: '8'
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: "./.github/actions/install-all-dependencies"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.autograd_backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
    - uses: "./.github/actions/build-flashlight-core"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
        build_parallelism: "${{ matrix.build_parallelism }}"
    - uses: actions/upload-artifact@v4.1.0
      with:
        path: "./."
  build-flashlight-pkg:
    runs-on: ubuntu-latest
    needs:
    - build-flashlight-core-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>+<< matrix.distributed_backend >>
    strategy:
      matrix:
        pkg:
        - runtime
        - speech
        - vision
        - text
        platform:
        - linux
        backend:
        - arrayfire
        autograd_backend:
        - cudnn
        distributed_backend:
        - nccl
        build_parallelism:
        - '8'
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: "./.github/actions/install-all-dependencies"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.autograd_backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
    - uses: "./.github/actions/install-pkg-dependencies"
      with:
        pkg: "${{ matrix.pkg }}"
        platform: "${{ matrix.platform }}"
    - uses: actions/download-artifact@v4.1.0
      with:
        path: "."
    - name: Build Flashlight with ${{ matrix.pkg }} package
      run: |-
        cmake -S . -B build \
          -DFL_BUILD_PKG_RUNTIME=ON \
          -DFL_BUILD_PKG_SPEECH=$([ "${{ matrix.pkg }}" == "speech" ] && echo "ON" || echo "OFF") \
          -DFL_BUILD_PKG_VISION=$([ "${{ matrix.pkg }}" == "vision" ] && echo "ON" || echo "OFF") \
          -DFL_BUILD_PKG_TEXT=$([ "${{ matrix.pkg }}" == "text" ] && echo "ON" || echo "OFF")
        cmake --build build --parallel ${{ matrix.build_parallelism }}
    - uses: actions/upload-artifact@v4.1.0
      with:
        path: "./."
  test-flashlight-pkg:
    runs-on: ubuntu-latest
    needs:
    - build-flashlight-pkg-<< matrix.pkg >>-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>+<< matrix.distributed_backend >>
    strategy:
      matrix:
        pkg:
        - runtime
        - speech
        - vision
        - text
        platform:
        - linux
        backend:
        - arrayfire
        autograd_backend:
        - cudnn
        distributed_backend:
        - nccl
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: "./.github/actions/install-all-dependencies"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.autograd_backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
    - uses: "./.github/actions/install-pkg-dependencies"
      with:
        pkg: "${{ matrix.pkg }}"
        platform: "${{ matrix.platform }}"
    - uses: actions/download-artifact@v4.1.0
      with:
        path: "."
    - uses: "./.github/actions/test-flashlight"
      with:
        path: build/flashlight/pkg/${{ matrix.pkg }}/test
  build-flashlight-apps-for-pkg:
    runs-on: ubuntu-latest
    needs:
    - build-flashlight-pkg-<< matrix.pkg >>-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>+<< matrix.distributed_backend >>
    strategy:
      matrix:
        pkg:
        - runtime
        - speech
        - vision
        - text
        platform:
        - linux
        backend:
        - arrayfire
        autograd_backend:
        - cudnn
        distributed_backend:
        - nccl
        build_parallelism:
        - '8'
    steps:
    - uses: actions/checkout@v4.1.0
    - uses: "./.github/actions/install-all-dependencies"
      with:
        platform: "${{ matrix.platform }}"
        backend: "${{ matrix.backend }}"
        autograd_backend: "${{ matrix.autograd_backend }}"
        distributed_backend: "${{ matrix.distributed_backend }}"
    - uses: "./.github/actions/install-pkg-dependencies"
      with:
        pkg: "${{ matrix.pkg }}"
        platform: "${{ matrix.platform }}"
    - uses: actions/download-artifact@v4.1.0
      with:
        path: "."
    - name: Build Flashlight apps for ${{ matrix.pkg }} package
      run: |-
        cmake -S . -B build \
          -DFL_BUILD_APP_ASR=$([ "${{ matrix.pkg }}" == "speech" ] && echo "ON" || echo "OFF") \
          -DFL_BUILD_APP_IMGCLASS=$([ "${{ matrix.pkg }}" == "vision" ] && echo "ON" || echo "OFF") \
          -DFL_BUILD_APP_OBJDET=$([ "${{ matrix.pkg }}" == "vision" ] && echo "ON" || echo "OFF") \
          -DFL_BUILD_APP_LM=$([ "${{ matrix.pkg }}" == "text" ] && echo "ON" || echo "OFF")
        cmake --build build --parallel ${{ matrix.build_parallelism }}
